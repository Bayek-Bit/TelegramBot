# –ò—Å—Ç–µ—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å–≤–æ–±–æ–∂–¥–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime

from app.bot import bot

from app.database import ExecutorDatabaseHandler, ClientDatabaseHandler

from app.keyboards import create_payment_keyboard


executor_router = Router()
ClientHandler = ClientDatabaseHandler()
ExecutorHandler = ExecutorDatabaseHandler()


class ExecutorStates(StatesGroup):
    working = State()
    chatting_with_client = State()
    # for future
    chatting_with_support = State()

async def handle_executor_interaction(
    message: Message, 
    state: FSMContext, 
    order_id: int,
    order_details: dict, 
    payment_amount: float, 
    payment_deadline: datetime, 
    payment_sender: str, 
):
    """Handle interaction with the executor."""
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
    product_list = "\n".join(
        [f"{product["product_name"]}: {product["product_description"]}" for product in order_details["products"]]
    )

    executor_id = await ExecutorHandler.assign_executor_to_order(order_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    await bot.send_message(
        chat_id=executor_id,
        reply_markup=create_payment_keyboard(order_id=order_details["order_id"]),
        text=(
            f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} –Ω–∞ —Å—É–º–º—É {payment_amount} —Ä—É–±.\n"
            f"–ü—Ä–æ–¥—É–∫—Ç—ã:\n{product_list}\n"
            f"–û–ø–ª–∞—Ç–∞ –æ—Ç: {payment_sender}\n"
            f"–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: {payment_deadline.strftime('%H:%M:%S')}"
        )
    )


@executor_router.callback_query(F.data.startswith("approve_payment_"))
async def approve_payment(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º."""
    success_payment_photo = FSInputFile("app\\icons\\success.jfif")
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
        order_id = int(callback_query.data.split('_')[-1])
        
        # id –∫–ª–∏–µ–Ω—Ç–∞
        client_telegram_id = await ExecutorHandler.get_client_telegram_id_by_order_id(order_id=order_id)

        await bot.send_photo(
            chat_id=client_telegram_id,
            photo=success_payment_photo,
            caption="üíö–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞, –æ–∂–∏–¥–∞–π—Ç–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è.\n\n‚ùó–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞."
            )

    except Exception as e:
        await callback_query.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@executor_router.callback_query(F.data.startswith("reject_payment_"))
async def approve_payment(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º."""
    success_payment_photo = FSInputFile("app\\icons\\success.jfif")
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
        order_id = int(callback_query.data.split('_')[-1])
        
        # id –∫–ª–∏–µ–Ω—Ç–∞
        client_telegram_id = await ExecutorHandler.get_client_telegram_id_by_order_id(order_id=order_id)

        await bot.send_photo(
            chat_id=client_telegram_id,
            photo=success_payment_photo,
            caption="üíî–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –æ–ø–ª–∞—Ç—É –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
            )

    except Exception as e:
        await callback_query.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

    # order_id = int(callback_query.data.split("_")[1])

    # # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–∫–∞–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    # await ExecutorDatabaseHandler.assign_executor_to_order(order_id=order_id)
    # await callback_query.message.edit_media(InputMediaPhoto(media=success_payment_photo, caption="–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ó–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é."))
    # await state.clear()


# @order_router.callback_query(F.data.startswith("reject_payment_"))
# async def reject_payment(callback_query: CallbackQuery, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º."""
#     error_photo = FSInputFile("app\\icons\something_went_wrong.jfif")
    
#     order_id = int(callback_query.data.split("_")[1])

#     # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
#     # —á–∞—Å—Ç—å —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º, –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å
#     # –≤ –∑–∞–∫–∞–∑–∞—Ö –µ—Å—Ç—å executor_id, –ø–æ—ç—Ç–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ id.
#     await ClientHandler.cancel_order(order_id=order_id)
#     await callback_query.message.edit_text(
#         "–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."
#     )
#     # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
#     await callback_query.message.edit_media(
#         InputMediaPhoto(media=error_photo, caption="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
#     )
#     await state.clear()