# –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ email

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from asyncio import create_task, sleep
from datetime import datetime

from app.bot import bot

from app.database import ExecutorDatabaseHandler, ClientDatabaseHandler

from app.keyboards import create_payment_keyboard


executor_router = Router()
ClientHandler = ClientDatabaseHandler()
ExecutorHandler = ExecutorDatabaseHandler()

SUCCESS_PAYMENT_PHOTO = FSInputFile("app\\icons\\success.jfif")
ERROR_PHOTO = FSInputFile("app\\icons\\something_went_wrong.jfif")


class ExecutorStates(StatesGroup):
    working = State()
    chatting_with_client = State()
    # for future
    chatting_with_support = State()

async def handle_executor_interaction(
    message: Message, 
    state: FSMContext, 
    order_id: int,
    order_details: dict, 
    payment_amount: float, 
    payment_deadline: datetime, 
    payment_sender: str, 
):
    """Handle interaction with the executor."""
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
    product_list = "\n".join(
        [f"{product["product_name"]}: {product["product_description"]}" for product in order_details["products"]]
    )

    executor_id = await ExecutorHandler.assign_executor_to_order(order_id)

    if not executor_id:
        await bot.send_message(
                chat_id=message.from_user.id,
                text="‚è≥–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –∑–∞–Ω—è—Ç—ã. –í–∞—à –∑–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å."
        )
        
        # –ü–æ—Å–ª–µ —É–ª–æ–≤–Ω—ã—Ö 10 –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–º–µ–Ω—è—Ç—å –∑–∞–∫–∞–∑ –∏ –ø—Ä–æ—Å–∏—Ç—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–∑–∂–µ.
        while not executor_id:
            await sleep(60) # in seconds. Minute because for now we have only 1 executor.
            executor_id = await ExecutorHandler.assign_executor_to_order(order_id)
        
        await bot.send_message(
                chat_id=message.from_user.id,
                text="‚ú®–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –≤–∞—à –∑–∞–∫–∞–∑."
            )
        return "Assigned"     
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    await bot.send_message(
        chat_id=executor_id,
        reply_markup=create_payment_keyboard(order_id=order_details["order_id"]),
        text=(
            f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} –Ω–∞ —Å—É–º–º—É {payment_amount} —Ä—É–±.\n"
            f"–ü—Ä–æ–¥—É–∫—Ç—ã:\n{product_list}\n"
            f"–û–ø–ª–∞—Ç–∞ –æ—Ç: {payment_sender}\n"
            f"–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: {payment_deadline.strftime('%H:%M:%S')}"
        )
    )


@executor_router.callback_query(F.data.startswith("approve_payment_"))
async def approve_payment(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º."""
    try:
        await state.set_state(ExecutorStates.working)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
        order_id = int(callback_query.data.split('_')[-1])

        # id –∫–ª–∏–µ–Ω—Ç–∞
        client_telegram_id = await ExecutorHandler.get_client_telegram_id_by_order_id(order_id=order_id)

        await state.update_data(order_id=order_id)
        await state.update_data(client_telegram_id=client_telegram_id)

        await bot.send_photo(
            chat_id=client_telegram_id,
            photo=SUCCESS_PAYMENT_PHOTO,
            caption="üíö–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.\n\n‚ùó–°–∫–æ—Ä–æ –≤–∞–º –Ω–∞ –ø–æ—á—Ç—É –ø—Ä–∏–¥—ë—Ç –∫–æ–¥.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É.\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–π–¥—ë—Ç –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç –∑–∞–∫–∞–∑."
        )

    except Exception as e:
        await callback_query.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@executor_router.callback_query(F.data.startswith("reject_payment_"))
async def reject_payment(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
        order_id = int(callback_query.data.split('_')[-1])
        
        await ClientHandler.cancel_order(order_id=order_id)

        # id –∫–ª–∏–µ–Ω—Ç–∞
        client_telegram_id = await ExecutorHandler.get_client_telegram_id_by_order_id(order_id=order_id)

        await bot.send_photo(
            chat_id=client_telegram_id,
            photo=ERROR_PHOTO,
            caption="üíî–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –æ–ø–ª–∞—Ç—É –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )

    except Exception as e:
        await callback_query.answer(f"–û—à–∏–±–∫–∞: {str(e)}")