# TODO:
# 1. –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
# –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–æ –≤—Ä–µ–º—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–Ω—è—Ç–∏—è –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.
# 2. –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –≤—ã–±–æ—Ä–æ–º —Ç–æ–≤–∞—Ä–æ–≤. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤—Å—ë –≤—Ä–µ–º—è, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Ç–æ–≤–∞—Ä. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ä–∞–≤–Ω–∞ 0.
# 3. –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ª—é–±–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª.

from aiogram import Router, F
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    FSInputFile,
    InputMediaPhoto
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from asyncio import create_task
from datetime import datetime, timedelta
import re

# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from app.database import ClientDatabaseHandler
# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from app.keyboards import create_categories_keyboard, create_products_keyboard
# –û–ø–ª–∞—Ç–∞
from app.payment import check_payment_timeout
# –û–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
from app.executor_handlers import handle_executor_interaction

# –†—É—Å—Å–∫–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
import locale
locale.setlocale(locale.LC_TIME, "Russian")



order_router = Router()
ClientHandler = ClientDatabaseHandler()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
class ProductStates(StatesGroup):
    choosing_category = State()
    choosing_products = State()
    confirm_order = State()
    waiting_for_payment = State()

async def calculate_total(selected_products):
    """–ü–æ–¥—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã –¥–ª—è –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤."""
    if not selected_products:
        return 0

    product_ids = list(selected_products.keys())
    prices = await ClientHandler.get_products_prices(product_ids)
    return sum(prices[pid] * count for pid, count in selected_products.items())

@order_router.callback_query(F.data == "show_products")
async def show_categories(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã'. –í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    show_categories_photo = FSInputFile("app\\icons\\main_icon1.jfif")
    error_photo = FSInputFile("app\\icons\\something_went_wrong.jfif")
    
    categories = await ClientHandler.get_categories()
    user_data = await state.get_data()
    selected_products = user_data.get("selected_products", {})
    total = await calculate_total(selected_products)

    if not categories:
        await callback_query.message.edit_caption(InputMediaPhoto(media=error_photo, caption="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."))
        await callback_query.answer()
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    categories_keyboard = create_categories_keyboard(categories)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(categories={cat["name"]: cat["category_id"] for cat in categories})

    await callback_query.message.edit_media(InputMediaPhoto(media=show_categories_photo,
                                                            caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n\nüíé–ò—Ç–æ–≥–æ: {total}—Ä."),
                                                            reply_markup=categories_keyboard)
    await state.set_state(ProductStates.choosing_category)
    await callback_query.answer()


@order_router.callback_query(ProductStates.choosing_products, F.data.startswith("product_"))
async def handle_product_selection(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    product_id = int(callback_query.data.split("_")[1])

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    user_data = await state.get_data()
    selected_products = user_data.get("selected_products", {})  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω
    selected_products[product_id] = selected_products.get(product_id, 0) + 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await state.update_data(selected_products=selected_products)

    await callback_query.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

# @order_router.message(F.text == "reset_state")
# async def reset_state(message: Message, state: FSMContext):
#     await state.clear()
#     await message.answer("Cancelled", reply_markup=ReplyKeyboardRemove())

@order_router.callback_query(ProductStates.choosing_category, F.data.startswith("category_"))
async def show_products_in_category(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤."""
    category_id = int(callback_query.data.split("_")[1])
    products = await ClientHandler.get_products_by_category(category_id)
    user_data = await state.get_data()
    selected_products = user_data.get("selected_products", {})
    total = await calculate_total(selected_products)

    if not products:
        await callback_query.message.answer("–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        await callback_query.answer()
        return

    product_photo = FSInputFile("app\\icons\\bonny.jfif")
    keyboard = create_products_keyboard(products)
    combined_keyboard = InlineKeyboardMarkup(inline_keyboard=
        keyboard.inline_keyboard + [
            [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="reset_products")],
            [
                InlineKeyboardButton(text="‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="show_products"),
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")
            ]
        ]
    )

    await callback_query.message.edit_media(
        InputMediaPhoto(media=product_photo, caption=f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\nüíé–ò—Ç–æ–≥–æ: {total}—Ä."),
        reply_markup=combined_keyboard
    )
    if "selected_products" not in user_data:
        await state.update_data(selected_products={})

    await state.set_state(ProductStates.choosing_products)
    await callback_query.answer()

@order_router.callback_query(F.data == "reset_products")
async def reset_selected_products(callback_query: CallbackQuery, state: FSMContext):
    """–°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤."""
    await state.update_data(selected_products={})
    await callback_query.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã.")


@order_router.callback_query(F.data == "confirm_order")
async def finalize_order(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    payment_photo = FSInputFile("app\\icons\\payment.jfif")
    user_data = await state.get_data()
    selected_products = user_data.get("selected_products", {})
    
    if not selected_products:
        await callback_query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    
    total = await calculate_total(selected_products)
    order_id = await ClientHandler.create_order(callback_query.from_user.id, list(selected_products.keys()))
    payment_deadline = datetime.now() + timedelta(minutes=15)
    
    await state.update_data(order_id=order_id, payment_deadline=payment_deadline)
    await callback_query.message.edit_media(
        InputMediaPhoto(media=payment_photo, caption=(
            f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω. –°—É–º–º–∞: {total} —Ä—É–±.\n"
            "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é –±–æ—Ç–æ–º —Å—É–º–º—É –Ω–∞ —ç—Ç–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
            "–ö–∞—Ä—Ç–∞: 1234 5678 9012 3456\n"
            "–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n"
            "–ë–∞–Ω–∫: –¢–µ—Å—Ç–ë–∞–Ω–∫\n"
            f"–í—Ä–µ–º—è –¥–ª—è –æ–ø–ª–∞—Ç—ã: –¥–æ {payment_deadline.strftime('%H:%M:%S')}\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —É–∫–∞–∂–∏—Ç–µ –§.–ò.–û. –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ –ò. –∏–ª–∏.\n"
            "–§.–ò.–û. –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞."
        ))
    )
    await state.set_state(ProductStates.waiting_for_payment)
    create_task(check_payment_timeout(order_id, payment_deadline, callback_query, state, ClientHandler))

@order_router.message(ProductStates.waiting_for_payment, F.text.regexp(r"^[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+(?:\s+[–ê-–Ø–Å](?:[–∞-—è—ë]+|\.))?$"))
async def process_payment_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."""
    await handle_executor_interaction(message, state)

@order_router.message(ProductStates.waiting_for_payment)
async def wrong_payment_confirmation_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è –§.–ò.–û. –∫–ª–∏–µ–Ω—Ç–æ–º"""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ –§.–ò.–û. –ø–æ –ø—Ä–∏–º–µ—Ä—É, –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–º—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏.")