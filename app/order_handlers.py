# TODO:
# 1. –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–∫–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —É–≤–µ—Ä–µ–Ω –ª–∏ –∏ —Ç.–ø.
# 2. –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
# –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ –≤—Ä–µ–º—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–Ω—è—Ç–∏—è–æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º
# 3. –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –≤—ã–±–æ—Ä–æ–º —Ç–æ–≤–∞—Ä–æ–≤

from aiogram import Router, F
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove,
    CallbackQuery,
    FSInputFile,
    InputMediaPhoto
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from asyncio import sleep, create_task
from datetime import datetime, timedelta

from app.database import ClientDatabaseHandler, ExecutorDatabaseHandler
from app.keyboards import create_categories_keyboard, create_products_keyboard

# –†—É—Å—Å–∫–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
import locale
locale.setlocale(locale.LC_TIME, "Russian")

order_router = Router()
ClientHandler = ClientDatabaseHandler()
ExecutorHandler = ExecutorDatabaseHandler()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
class ProductStates(StatesGroup):
    choosing_category = State()
    choosing_products = State()
    confirm_order = State()
    waiting_for_payment = State()


@order_router.callback_query(F.data == "show_products")
async def show_categories(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã'. –í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    show_categories_photo = FSInputFile("app\\icons\\main_icon1.jfif")
    error_photo = FSInputFile("app\\icons\\something_went_wrong.jfif")
    
    categories = await ClientHandler.get_categories()

    if not categories:
        await callback_query.message.edit_caption(InputMediaPhoto(media=error_photo, caption="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."))
        await callback_query.answer()
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    categories_keyboard = create_categories_keyboard(categories)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(categories={cat["name"]: cat["category_id"] for cat in categories})

    await callback_query.message.edit_media(InputMediaPhoto(media=show_categories_photo,
                                                            caption="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"),
                                                            reply_markup=categories_keyboard)
    await state.set_state(ProductStates.choosing_category)
    await callback_query.answer()


@order_router.callback_query(ProductStates.choosing_products, F.data.startswith("product_"))
async def handle_product_selection(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    product_id = int(callback_query.data.split("_")[1])

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    user_data = await state.get_data()
    selected_products = user_data.get("selected_products", {})  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω
    selected_products[product_id] = selected_products.get(product_id, 0) + 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await state.update_data(selected_products=selected_products)

    await callback_query.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

# @order_router.message(F.text == "reset_state")
# async def reset_state(message: Message, state: FSMContext):
#     await state.clear()
#     await message.answer("Cancelled", reply_markup=ReplyKeyboardRemove())

@order_router.callback_query(ProductStates.choosing_category, F.data.startswith("category_"))
async def show_products_in_category(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤."""
    category_id = int(callback_query.data.split("_")[1])

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = await ClientHandler.get_products_by_category(category_id)

    if not products:
        await callback_query.message.answer("–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        await callback_query.answer()
        return

    # –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤
    product_photo = FSInputFile("app\\icons\\bonny.jfif")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    keyboard = create_products_keyboard(products)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    combined_keyboard = InlineKeyboardMarkup(inline_keyboard=
        keyboard.inline_keyboard + [
            # –ü–µ—Ä–≤—ã–π —Ä—è–¥, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ 1 –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞
            [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="reset_products")],
            # –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
            [
                InlineKeyboardButton(text="‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="show_products"),
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")
            ]
        ]
    )

    await callback_query.message.edit_media(
            InputMediaPhoto(media=product_photo,
                            caption="–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\nüçÅ–í–∞–∂–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ü–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–∞ —Å–≤–æ—ë–º –∞–∫–∫–∞—É–Ω—Ç–µ."),
            reply_markup=combined_keyboard
                )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    user_data = await state.get_data()
    if "selected_products" not in user_data:
        await state.update_data(selected_products={})

    await state.set_state(ProductStates.choosing_products)
    await callback_query.answer()

# –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
@order_router.callback_query(F.data == "reset_products")
async def reset_selected_products(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤."""
    await state.update_data(selected_products={})
    await callback_query.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã.")


@order_router.callback_query(F.data == "confirm_order")
async def finalize_order(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    payment_photo = FSInputFile("app\\icons\\payment.jfif")
    
    user_data = await state.get_data()
    if not user_data["selected_products"]:
        await callback_query.answer()
        return 
    selected_products = user_data.get("selected_products", {})

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞–∑—ã (—Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Ç–æ–≤–∞—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
    product_ids_with_count = []
    for product_id, count in selected_products.items():
        product_ids_with_count.extend([product_id] * count)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    order_id = await ClientHandler.create_order(callback_query.from_user.id, product_ids_with_count)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    payment_deadline = datetime.now() + timedelta(minutes=15)
    await state.update_data(order_id=order_id, payment_deadline=payment_deadline)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
    text = (
        f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ωüñ§\n"
        "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
        "–ö–∞—Ä—Ç–∞: 1234 5678 9012 3456\n"
        "–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n"
        "–ë–∞–Ω–∫: –¢–µ—Å—Ç–ë–∞–Ω–∫\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò. –∏–ª–∏ –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò.).\n\n"
        f"–í—Ä–µ–º—è –¥–ª—è –æ–ø–ª–∞—Ç—ã: –¥–æ {payment_deadline.strftime('%H:%M:%S')}."
    )
    await callback_query.message.edit_media(InputMediaPhoto(media=payment_photo, caption=text))
    await state.set_state(ProductStates.waiting_for_payment)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
    create_task(check_payment_timeout(order_id, payment_deadline, callback_query, state))


async def check_payment_timeout(order_id: int, payment_deadline: datetime, callback_query: CallbackQuery, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏."""
    time_remaining = (payment_deadline - datetime.now()).total_seconds()
    if time_remaining > 0:
        await sleep(time_remaining)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω
    payment_status = await ClientHandler.get_order_payment_status(order_id=order_id)
    if payment_status == "waiting_for_payment":
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
        await ClientHandler.cancel_order(order_id=order_id)
        await callback_query.message.answer(
            "–í—Ä–µ–º—è –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω. "
            "–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        await state.clear()


@order_router.message(ProductStates.waiting_for_payment, F.text.regexp(r"^[–ê-–Ø–Å][–∞-—è—ë]+( [–ê-–Ø–Å]\.?){1,2}$"))
async def process_payment_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã."""
    error_photo = FSInputFile("app\\icons\\something_went_wrong.jfif")
    
    user_data = await state.get_data()
    order_id = user_data.get("order_id")

    if not order_id:
        await message.edit_media(InputMediaPhoto(media=error_photo, caption="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."))
        return

    client_name = message.text.strip()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    executor_id = await ClientHandler.get_available_executor()
    if not executor_id:
        await message.edit_media(InputMediaPhoto(media=error_photo, caption="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
        return

    # –¢—É—Ç —á–∞—Å—Ç—å –∫–æ–¥–∞ —Å —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, —ç—Ç–æ —è –¥–æ–ø–∏—à—É 26.01
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"approve_payment_{order_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"reject_payment_{order_id}")]
    ])

    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã, –ø–æ—Ç–æ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–∫–∞–∑
    # –î–û–ü–ò–°–ê–¢–¨ —Ç—É—Ç –≤—Å—ë –∑–∞–≤—Ç—Ä–∞.
    await message.answer(
        f"–û–ø–ª–∞—Ç–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_name} –ø–æ—Å—Ç—É–ø–∏–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –µ—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ.",
        reply_markup=keyboard
    )


@order_router.callback_query(F.data.startswith("approve_payment_"))
async def approve_payment(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º."""
    success_payment_photo = FSInputFile("app\\icons\\success.jfif")
    
    order_id = int(callback_query.data.split("_")[1])

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–∫–∞–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    await ExecutorDatabaseHandler.assign_executor_to_order(order_id=order_id)
    await callback_query.message.edit_media(InputMediaPhoto(media=success_payment_photo, caption="–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ó–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é."))
    await state.clear()


@order_router.callback_query(F.data.startswith("reject_payment_"))
async def reject_payment(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º."""
    error_photo = FSInputFile("app\\icons\something_went_wrong.jfif")
    
    order_id = int(callback_query.data.split("_")[1])

    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
    # —á–∞—Å—Ç—å —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º, –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å
    # –≤ –∑–∞–∫–∞–∑–∞—Ö –µ—Å—Ç—å executor_id, –ø–æ—ç—Ç–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ id.
    await ClientHandler.cancel_order(order_id=order_id)
    await callback_query.message.edit_text(
        "–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."
    )
    # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    await callback_query.message.edit_media(
        InputMediaPhoto(media=error_photo, caption="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    )
    await state.clear()