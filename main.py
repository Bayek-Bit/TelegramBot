import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, InputMediaPhoto, FSInputFile, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder

#debug
from test import debug_router

from config import settings

# database
import app.database as db

# orders
from app.order_handlers import order_router

# keyboards
import app.keyboards as kb

dp = Dispatcher()
ClientHandler = db.ClientDatabaseHandler()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class RegistrationStates(StatesGroup):
    waiting_for_agreement = State()


@dp.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    client_info = await ClientHandler.get_client_info(message.from_user.id)

    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ
    main_photo = FSInputFile("app\\icons\\main_icon.jfif")
    new_client_photo = FSInputFile("app\\icons\\new_client.jfif")

    if client_info:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        keyboard_builder = InlineKeyboardBuilder()
        keyboard_builder.button(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="show_products")
        await message.answer_photo(main_photo, caption="–ü—Ä–∏–≤–µ—Ç ü§ç\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ –∑–∞–∫–∏–Ω—É—Ç—å –≥–µ–º—á–∏–∫–æ–≤(–∏ –Ω–µ —Ç–æ–ª—å–∫–æ) –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=keyboard_builder.as_markup(resize_keyboard=True))
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        inline_kb_builder = InlineKeyboardBuilder()
        inline_kb_builder.button(text="–•–æ—Ä–æ—à–æ", callback_data="agree")

        await message.answer_photo(photo=new_client_photo, caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ(–ø–æ—á—Ç—É –∏ –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞) –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∏ —Ç–æ–ª—å–∫–æ –µ–º—É.\n–¢–∞–∫ –∂–µ –∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è/–ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.\n\n–û—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ FAQ(/faq).\n\n–î–æ–±—Ä–æ–≥–æ –∑–¥—Ä–∞–≤–∏—è –æ—Ç —Å–ª–∞–≤—è–Ω–∫–∏ ü§ç", reply_markup=inline_kb_builder.as_markup())
        await state.set_state(RegistrationStates.waiting_for_agreement)


@dp.callback_query(RegistrationStates.waiting_for_agreement, F.data == "agree")
async def agree_to_terms(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."""
    main_photo = FSInputFile("app\\icons\\main_icon.jfif")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await ClientHandler.add_new_client(telegram_id=callback_query.message.from_user.id)
    
    await callback_query.message.edit_media(InputMediaPhoto(media=main_photo, caption="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç.\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–∫–∞–∑–æ–º, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É(/help)"))

    await state.clear()


async def main():
    bot = Bot(settings.GET_TOKEN["TOKEN"])
    # like skip_updates=True in earlier versions of aiogram
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
    dp.include_router(order_router)
    dp.include_router(debug_router)

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    await db.create_tables()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
